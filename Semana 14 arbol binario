using System;

class Nodo
{
    public int Valor { get; set; }
    public Nodo Izquierdo { get; set; }
    public Nodo Derecho { get; set; }

    public Nodo(int valor)
    {
        Valor = valor;
        Izquierdo = null;
        Derecho = null;
    }
}

class ArbolBinario
{
    private Nodo raiz;

    public ArbolBinario()
    {
        raiz = null;
    }

    public void Insertar(int valor)
    {
        raiz = InsertarRecursivo(raiz, valor);
    }

    private Nodo InsertarRecursivo(Nodo nodo, int valor)
    {
        if (nodo == null)
        {
            return new Nodo(valor);
        }

        if (valor < nodo.Valor)
        {
            nodo.Izquierdo = InsertarRecursivo(nodo.Izquierdo, valor);
        }
        else if (valor > nodo.Valor)
        {
            nodo.Derecho = InsertarRecursivo(nodo.Derecho, valor);
        }

        return nodo;
    }

    public bool Buscar(int valor)
    {
        return BuscarRecursivo(raiz, valor);
    }

    private bool BuscarRecursivo(Nodo nodo, int valor)
    {
        if (nodo == null)
        {
            return false;
        }

        if (valor == nodo.Valor)
        {
            return true;
        }

        if (valor < nodo.Valor)
        {
            return BuscarRecursivo(nodo.Izquierdo, valor);
        }
        else
        {
            return BuscarRecursivo(nodo.Derecho, valor);
        }
    }

    public void RecorridoEnOrden()
    {
        RecorridoEnOrdenRecursivo(raiz);
        Console.WriteLine();
    }

    private void RecorridoEnOrdenRecursivo(Nodo nodo)
    {
        if (nodo != null)
        {
            RecorridoEnOrdenRecursivo(nodo.Izquierdo);
            Console.Write(nodo.Valor + " ");
            RecorridoEnOrdenRecursivo(nodo.Derecho);
        }
    }

    public int EncontrarMinimo()
    {
        if (raiz == null)
        {
            throw new InvalidOperationException("El árbol está vacío");
        }

        Nodo nodoActual = raiz;
        while (nodoActual.Izquierdo != null)
        {
            nodoActual = nodoActual.Izquierdo;
        }
        return nodoActual.Valor;
    }

    public int EncontrarMaximo()
    {
        if (raiz == null)
        {
            throw new InvalidOperationException("El árbol está vacío");
        }

        Nodo nodoActual = raiz;
        while (nodoActual.Derecho != null)
        {
            nodoActual = nodoActual.Derecho;
        }
        return nodoActual.Valor;
    }
}

class Program
{
    static void Main(string[] args)
    {
        ArbolBinario arbol = new ArbolBinario();
        bool salir = false;

        while (!salir)
        {
            MostrarMenu();
            string opcion = Console.ReadLine();

            switch (opcion)
            {
                case "1":
                    Console.Write("Ingrese el valor a insertar: ");
                    int valorInsertar = int.Parse(Console.ReadLine());
                    arbol.Insertar(valorInsertar);
                    Console.WriteLine("Valor insertado correctamente.");
                    break;

                case "2":
                    Console.Write("Ingrese el valor a buscar: ");
                    int valorBuscar = int.Parse(Console.ReadLine());
                    bool encontrado = arbol.Buscar(valorBuscar);
                    Console.WriteLine(encontrado ? "Valor encontrado." : "Valor no encontrado.");
                    break;

                case "3":
                    Console.WriteLine("Recorrido en orden:");
                    arbol.RecorridoEnOrden();
                    break;

                case "4":
                    try
                    {
                        int minimo = arbol.EncontrarMinimo();
                        Console.WriteLine($"Valor mínimo: {minimo}");
                    }
                    catch (InvalidOperationException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                    break;

                case "5":
                    try
                    {
                        int maximo = arbol.EncontrarMaximo();
                        Console.WriteLine($"Valor máximo: {maximo}");
                    }
                    catch (InvalidOperationException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                    break;

                case "6":
                    salir = true;
                    Console.WriteLine("Saliendo del programa...");
                    break;

                default:
                    Console.WriteLine("Opción inválida. Intente nuevamente.");
                    break;
            }

            Console.WriteLine("\nPresione cualquier tecla para continuar...");
            Console.ReadKey();
            Console.Clear();
        }
    }

    static void MostrarMenu()
    {
        Console.WriteLine("=== Menú de Árbol Binario ===");
        Console.WriteLine("1. Insertar un valor");
        Console.WriteLine("2. Buscar un valor");
        Console.WriteLine("3. Recorrido en orden");
        Console.WriteLine("4. Encontrar valor mínimo");
        Console.WriteLine("5. Encontrar valor máximo");
        Console.WriteLine("6. Salir");
        Console.Write("Seleccione una opción: ");
    }
}
